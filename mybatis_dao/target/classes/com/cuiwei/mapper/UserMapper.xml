<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.cuiwei.mapper.UserMapper">

    <!--根据ID查询所有-->
    <select id="findUserById" parameterType="int" resultMap="userResultMap">
        select  * from user where id = #{id}
    </select>



    <!--这个ID属于标签的唯一标识-->
    <!--这个type就是封装后的实体类型  写的是User类的全路径-->
    <resultMap id="userResultMap" type="user">
        <!--手动配置映射关系-->
        <!--id  用来配置主键的-->
        <id property="id" column="id"></id>
        <!--result对表中普通字段进行封装-->
        <result property="username" column="username"></result>
        <result property="birthday" column="birthday"></result>
        <result property="sex" column="sex"></result>
        <result property="address" column="address"></result>
    </resultMap>
    <!--查询所有用户-->
    <!--resultMap   手动配置实体属性与表中的字段的映射关系，完了手动封装-->
    <select id="findAllResultMap" resultMap="userResultMap">
        select  * from user
    </select>


    <!--多条件查询方式  一  -->

    <select id="fingByIdAndUsername1" resultMap="userResultMap" >
        select * from user where id = #{arg0} and username = #{arg1}
    </select>

    <select id="findByIdUsername2" resultMap="userResultMap" >
        select * from user where id = #{id} and username = #{username}
    </select>


<!--多条件查询方式三-->
    <select id="findByIdAndUsername3" resultMap="userResultMap" resultType="com.cuiwei.domain.User" >
        select * from user where id = #{id} and username = #{usernameabc}
    </select>

    <!--模糊查询   方式一-->
    <select id="findByUsername" resultMap="userResultMap" parameterType="String">
            select * from user where username like #{usernameabc}
</select>

    <!--模糊查询   方式二-->
    <select id="findByUsername2" resultMap="userResultMap" parameterType="String">
                select * from user where username like '${value}'
</select>

    <!--添加用户  获取返回主键： 方式一-->
    <!--useGeneratedKeys 声明返回主键-->
    <!--keyProperty，把返回的主键值，封装到实体中的哪个属性上-->
        <insert id="saveUser" parameterType="user" useGeneratedKeys="true" keyProperty="id">
            insert into user (username,birthday,sex,address) values (#{username},#{birthday},#{sex},#{address})

        </insert>


    <!--添加用户  获取返回值    方式二-->

    <insert id="saveUser2" parameterType="user" >
            /*selectKey适用范围  更广   支持所有类型的数据库
        order="AFTER"   设置该语句在sql语句执行前还是执行后*/
        /*keyColumn="id" 指定主键对应列
        keyProperty="id"  将返回主键的id封装到实体类的id中*/
            <selectKey order="AFTER" keyColumn="id" keyProperty="id" resultType="int">
                select  last_insert_ID();
            </selectKey>
            insert into user (username,birthday,sex,address) values (#{username},#{birthday},#{sex},#{address})

        </insert>


    <!--动态Sql之If   多条件查询-->
    <select id="findByIdAndUsernameIf" resultType="com.cuiwei.domain.User" parameterType="user">
      select * from user where 1=1


            /*test里面写的就是表达式*/
            <if test="id != null">
                and id= #{id}
            </if>

            <if test="username != null">
                and username = #{username}
            </if>



 </select>


   <!--动态更新-->
    <update id="UpdateIf" parameterType="user">
        update user
        /*set标签  更新的时候，会自动添加set关键字，而且还会去掉最后一个条件的逗号*/
        <set>
            <if test="username!=null">
                username = #{username},
            </if>
            <if test="birthday!=null">
                birthday = #{birthday},
            </if>
            <if test="sex!=null">
                sex = #{sex},
            </if>
            <if test="address!=null">
                address = #{address},
            </if>

        </set>
        where  id = #{id}
    </update>


    <!--动态Sql的foreach标签：多值查询：根据多个ID值查询用户-->
    <select id="findByList" parameterType="list" resultType="user">
        select * from user
        <where>
        <!--
        collection 代表要遍历的集合元素  通常写collection或者list
        open：代表语句的开始部分
        close : 代表语句的结束部分
        item：代表集合遍历集合中的每个元素，生成的变量名
        seoarator：分隔符
        -->
           <foreach collection="list" open="id in(" close=")" item="id" separator=",">
                #{id}
            </foreach>
        </where>
    </select>




</mapper>